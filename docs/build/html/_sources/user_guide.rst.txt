User Guide
==============

This document gives a detailed look into the work-flow of *BlendingToolKit* (btk). For a quick tutorial on how to run btk, see the jupyter notebook tutorials `here <tutorials.html>`_. This page is especially useful if you plan to use btk with your own detection/deblending/measurement algorithm. The workflow presented here should be as general as possible ; examples for the WeakLensingDeblending case are also given.


The workflow of btk is shown here:

.. image:: images/flow_chart.png
   :align: center


1. Set parameter values : define parameter values to create postage stamps, including size of stamp, number of objects per blend, and how many stamps are to be drawn in one batch -- i.e., the number of stamps btk will produce together in a singe batch. The observing survey name (e.g., LSST, DES), the name of the input catalog to draw objects from, and the names of the observing bands are also specified here. 
2. Load Catalog : Reads the input catalog file. This must be done using a :class:`~btk.catalog.Catalog`-like object (e.g. :class:`~btk.catalog.WLDCatalog`), either by providing directly the catalog or by using the :meth:`~btk.catalog.Catalog.from_file` method. Additionally, the catalog can be filtered using the :meth:`~btk.catalog.Catalog.apply_selection_function` method and providing an appropriate selection function.
3. Make blend samples : Samples objects from the input catalog based on a user defined sampling function to create an astropy table with parameters of each blend. This is done using a :class:`~btk.create_blend_generator.BlendGenerator` object, which must be given a :class:`~btk.sampling_functions.SamplingFunction`-like object (e.g. :class:`~btk.sampling_functions.DefaultSamplingFunction`). The sampling function is a callable object which defines the parameters relative to each blend, ie which galaxies will be drawn, in what position, etc. Once created, the :class:`~btk.create_blend_generator.BlendGenerator` can be called using *next(<blend_generator>)*, which will give a batch of blend parameters. Users who want more control on their blend parameters may create a custom sampling function, based on the :class:`~btk.sampling_functions.SamplingFunction` class.
4. Make observing conditions : Defines the observing conditions, ie the PSF, pixel scale, noise level, etc. This is achieved using a :class:`~btk.create_observing_generator.ObservingGenerator`, which must be given a :class:`~btk.obs_conditions.ObsConditions` object (e.g. :class:`~btk.obs_conditions.DefaultObsConditions`), as well as the list of surveys. Much like the sampling function, the obs conditions is a callable object, which returns a :class:`~btk.obs_conditions.Cutout`-like object (e.g. :class:`~btk.obs_conditions.WLDCutout`) when given a survey and a band. The observing generator can be called using *next(<observing generator>)*, which will return a dictionary containing cutouts corresponding to each band in each survey.  Note that all blends drawn in a batch will be generated with the same observing conditions. As for the sampling function, users may want to create a custom obs conditions object (and possibly a custom cutout) if they wish to have more control over the observing conditions.
5. Draw blends : Simulates scene of overlapping objects, convolved by the PSF and with pixel noise. This step is done by creating a :class:`~btk.draw_blends.DrawBlendsGenerator`-like object (e.g. :class:`~btk.draw_blends.WLDGenerator`), which is given the blend and observing generator created in step 4 and 5. It can then be called using *next(<draw blends generator>)* to get the results as a dictionary, including the blends with the key *blend_images*, the isolated galaxy images with the key *isolated_images* and the blend parameters with the key *blend_list*. In the case where multiple surveys were provided in step 4, the results will instead take the form of a dictionary indexed by the survey names, each entry containing a dictionary with the aforementioned entries.
6. Detection/Deblending/Measure : Performs user-defined measurements on the generated blends. The user may create a :class:`~btk.measure.MeasureGenerator`, providing the draw blends generator from step 5 as well as a :class:`~btk.measure.MeasurementParams`-like object. There is no default instance of the measurement params, however some examples are available in :class:`~btk.utils`, including implementations of `SEP <https://sep.readthedocs.io/en/v1.0.x/index.html>`_ (SourceExtractor with python) , `LSST science pipeline <https://pipelines.lsst.io>`_ and `SCARLET <https://scarlet.readthedocs.io/en/latest/index.html>`_.
7. Compute metrics : compares the true centroids, shapes, and flux values to those predicted by the user-provided algorithm. Currently, BTK assesses only detection performance by returning the number of objects correctly detected, the number that are undetected and the number of spurious detections. This is achieved using a :class:`~btk.compute_metrics.MetricsParams` object, which takes as an argument the measure generator from step 6, and can be fed to the :func:`~btk.compute_metrics.run` function to get the desired results. Please note that this section may be reworked in the future.


*BlendingToolKit* can be run end-to-end using an input yaml config file, parsed by *btk_input.py*, which then runs btk with the defined parameters. However, this file is broken as of now and cannot be used yet.

